--GROUP 2
--ON_MATRIX MATRIX CONTROLLER ON
LIBRARY IEEE;
USE ieee.std_logic_1164.all;
----------------------------------------------------------
ENTITY title IS
	GENERIC( N_base :	INTEGER := 16);
	PORT(		clk 				: 		IN 		STD_LOGIC;
				rst 				: 		IN 		STD_LOGIC;
				matrix1			:		OUT		STD_LOGIC_VECTOR(15 DOWNTO 0);
				matrix2			:		OUT		STD_LOGIC_VECTOR(15 DOWNTO 0));
END ENTITY;

ARCHITECTURE controller	OF title IS
	TYPE 	 state IS (st0, st1, st2, st3, st4, st5, st6, st7, st8, st9, st10, st11, st12, st13, st14, st15, st16, st17, st18, st19, st20, st21, st22, st23, st24, st25, st26, st27, st28, st29, st30, st31, st32, st33, st34, st35, st36, st37, st38, st39, st40, st41, st42, st43, st44, st45, st46, st47, st48, st49, st50, st51, st52, st53, st54, st55, st56, st57, st58, st59, st60, st61, st62, st63); 
	SIGNAL pr_state, nx_state: state;
	SIGNAL max_tick: STD_LOGIC;
BEGIN
	PROCESS (rst, clk)
	BEGIN
		IF (rst='1') THEN
			pr_state <= st0;
		ELSIF (rising_edge(clk)) THEN
			IF (max_tick='1') THEN
				pr_state <= nx_state;
			END IF;
		END IF;
	END PROCESS;
	
		TIMER_ON_MATRIX: ENTITY work.univ_bin_counter
		GENERIC MAP	(	N				=> N_base)
		PORT MAP( clk 			=>	clk,
					 rst 			=> rst,
					 syn_clr		=> '0',
					 ena        => '1',
					 max_count  => "0011000011010100",
					 up 			=> '1',
					 max_tick	=> max_tick,
					 counter		=>	OPEN);
					 
	ON_MATRIX: PROCESS(max_tick,clk,pr_state, nx_state)
	BEGIN
		CASE pr_state IS
			WHEN st0=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st1;		
			WHEN st1=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st2;	
			WHEN st2=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st3;	
			WHEN st3=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st4;
			WHEN st4=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st5;
			WHEN st5=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st6;
				
			WHEN st6=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st7;
			WHEN st7=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st8;
			WHEN st8=>
				matrix1<="1100101110011000";
				matrix2<="1100101110011000";
				nx_state <= st9;
			WHEN st9=>
				matrix1<="1110101110010000";
				matrix2<="1100101110010100";
				nx_state <= st10;
			WHEN st10=>
				matrix1<="1101101110010000";
				matrix2<="1100101110010100";
				nx_state <= st11;
			WHEN st11=>
				matrix1<="1100101110010100";
				matrix2<="1100101111010000";
				nx_state <= st12;
			WHEN st12=>
				matrix1<="1100111110010000";
				matrix2<="1100101110010100";	
				nx_state <= st13;
			WHEN st13=>
				matrix1<="1100101110110000";
				matrix2<="1100101110110000";
				nx_state <= st14;
			WHEN st14=>
				matrix1<="1100101110010010";
				matrix2<="1100101110010010";
				nx_state <= st15;
			WHEN st15=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010001";
				nx_state <= st16;	
			WHEN st16=>
				matrix1<="1100101010011100";
				matrix2<="1100101010011100";
				nx_state <= st17;	
			WHEN st17=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st18;	
			WHEN st18=>
				matrix1<="1101101010010100";
				matrix2<="1100101110010100";
				nx_state <= st19;
			WHEN st19=>
				matrix1<="1100101110010100";
				matrix2<="1100101011010100";
				nx_state <= st20;	
			WHEN st20=>
				matrix1<="1100111010010100";
				matrix2<="1100101110010100";
				nx_state <= st21;	
			WHEN st21=>
				matrix1<="1100101110010100";
				matrix2<="1100101010110100";
				nx_state <= st22;	
			WHEN st22=>
				matrix1<="1100101010010110";
				matrix2<="1100101110010100";
				nx_state <= st23;	
			WHEN st23=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st24;	
			WHEN st24=>
				matrix1<="1100101110001100";
				matrix2<="1100101110001100";
				nx_state <= st25;	
			WHEN st25=>
				matrix1<="1110101110000100";
				matrix2<="1110101110000100";
				nx_state <= st26;	
			WHEN st26=>
				matrix1<="1101101110000100";
				matrix2<="1100101110010100";
				nx_state <= st27;	
			WHEN st27=>
				matrix1<="1100101110010100";
				matrix2<="1100101111000100";
				nx_state <= st28;		
			WHEN st28=>
				matrix1<="1100111110000100";
				matrix2<="1100101110010100";
				nx_state <= st29;	
			WHEN st29=>
				matrix1<="1100101110010100";
				matrix2<="1100101110100100";
				nx_state <= st30;	
			WHEN st30=>
				matrix1<="1100101110000110";
				matrix2<="1100101110000110";
				nx_state <= st31;	
			WHEN st31=>
				matrix1<="1100101110010100";
				matrix2<="1100101110000101";
				nx_state <= st32;	
			WHEN st32=>
				matrix1<="0100101110011100";
				matrix2<="0100101110011100";
				nx_state <= st33;	
			WHEN st33=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st34;	
			WHEN st34=>
				matrix1<="1100101110010100";
				matrix2<="0101101110010100";
				nx_state <= st35;	
			WHEN st35=>
				matrix1<="1100101110010100";
				matrix2<="0100101111010100";
				nx_state <= st36;	
			WHEN st36=>
				matrix1<="0100111110010100";
				matrix2<="1100101110010100";
				nx_state <= st37;	
			WHEN st37=>
				matrix1<="1100101110010100";
				matrix2<="0100101110110100";
				nx_state <= st38;	
			WHEN st38=>
				matrix1<="0100101110010110";
				matrix2<="1100101110010100";
				nx_state <= st39;	
			WHEN st39=>
				matrix1<="1100101110010100";
				matrix2<="0100101110010101";
				nx_state <= st40;	
			WHEN st40=>
				matrix1<="1100100110011100";
				matrix2<="1100100110011100";
				nx_state <= st41;
			WHEN st41=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st42;	
			WHEN st42=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st43;	
			WHEN st43=>
				matrix1<="1100101110010100";
				matrix2<="1100100111010100";
				nx_state <= st44;
			WHEN st44=>
				matrix1<="1100110110010100";
				matrix2<="1100101110010100";
				nx_state <= st45;	
			WHEN st45=>
				matrix1<="1100100110110100";
				matrix2<="1100100110110100";
				nx_state <= st46;	
			WHEN st46=>
				matrix1<="1100100110010110";
				matrix2<="1100100110010110";
				nx_state <= st47;	
			WHEN st47=>
				matrix1<="1100101110010100";
				matrix2<="1100100110010101";
				nx_state <= st48;	
			WHEN st48=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st49;	
			WHEN st49=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st50;	
			WHEN st50=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st51;	
			WHEN st51=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st52;	
			WHEN st52=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st53;	
			WHEN st53=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st54;	
			WHEN st54=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st55;	
			WHEN st55=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st56;	
			WHEN st56=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st57;	
			WHEN st57=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st58;	
			WHEN st58=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st59;	
			WHEN st59=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st60;	
			WHEN st60=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st61;	
			WHEN st61=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st62;	
			WHEN st62=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st63;	
			WHEN st63=>
				matrix1<="1100101110010100";
				matrix2<="1100101110010100";
				nx_state <= st0;	
		END CASE;
	END PROCESS ON_MATRIX;
END ARCHITECTURE controller;
