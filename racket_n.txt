LIBRARY IEEE;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
------------------------------------------------------------------
ENTITY racket_n IS
    PORT(   clk                 :  IN     STD_LOGIC;
				goal					  :  IN     STD_LOGIC;
            rst                 :  IN     STD_LOGIC;
				ena                 :  IN     STD_LOGIC;
            rl	              :  IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
            y1						  :  OUT    STD_LOGIC_VECTOR (3 DOWNTO 0);
				y2						  :  OUT    STD_LOGIC_VECTOR (3 DOWNTO 0);
            y3						  :  OUT    STD_LOGIC_VECTOR (3 DOWNTO 0));
END ENTITY;
----------------------------------------------------------------
ARCHITECTURE fsm OF racket_n IS
    TYPE state IS (stay, godown, goup);
    SIGNAL pr_state, nx_state: state;
	 SIGNAL y1_s, y3_s: STD_LOGIC_VECTOR(3 DOWNTO 0);
	 SIGNAL pos1, pos1_next, pos2, pos2_next, pos3, pos3_next: UNSIGNED(3 DOWNTO 0);
	 --SIGNAL rl : STD_LOGIC_VECTOR(1 DOWNTO 0) := "00";
	 SIGNAL ena_p, du, ena_speed_r :	STD_LOGIC := '0';
	 
 
BEGIN

speed_r: ENTITY work.univ_bin_counter
	  PORT MAP( clk            => clk,
					rst            => rst,
					syn_clr        => '0',
					ena        		=> ena,
					max_count  		=> "0000111001001110000111000000", --0000010011000100101101000000
					up             => '1',
					max_tick    	=> ena_speed_r,
					counter        => OPEN);


	pos1_next	<=		"0010"			WHEN	((ena = '0') OR (goal = '1'))		ELSE
							pos1 + 1			WHEN 	(ena_p ='1' AND du='0')		ELSE
							pos1 - 1			WHEN 	(ena_p ='1' AND du='1')		ELSE
							pos1;
											
	POS1p: PROCESS(clk,rst)
		VARIABLE temp_1	:	UNSIGNED(3 DOWNTO 0);
	BEGIN
		IF((rst='1') OR (goal = '1')) THEN
			temp_1:=	"0010";
		ELSIF (rising_edge(clk)) THEN
			IF ((ena='1') AND (ena_speed_r = '1')) THEN
				temp_1	:=	pos1_next;
			END IF;
		END IF;
		y1_s	<=	STD_LOGIC_VECTOR(temp_1);
		pos1	<=	temp_1;
	END PROCESS;
	
	pos2_next	<=		"0011"			WHEN	((ena = '0') OR (goal = '1'))	ELSE
							pos2 + 1			WHEN 	(ena_p ='1' AND du='0')		ELSE
							pos2 - 1			WHEN 	(ena_p ='1' AND du='1')		ELSE
							pos2;
											
	POS2P: PROCESS(clk,rst)
		VARIABLE temp_2	:	UNSIGNED(3 DOWNTO 0);
	BEGIN
		IF((rst='1') OR (goal = '1')) THEN
			temp_2:=	"0011";
		ELSIF (rising_edge(clk)) THEN
			IF ((ena='1') AND (ena_speed_r = '1')) THEN
				temp_2	:=	pos2_next;
			END IF;
		END IF;
		y2	<=	STD_LOGIC_VECTOR(temp_2);
		pos2	<=	temp_2;
	END PROCESS;
	
	pos3_next	<=		"0100"			WHEN	((ena = '0') OR (goal = '1'))		ELSE
							pos3 + 1			WHEN 	(ena_p ='1' AND du='0')		ELSE
							pos3 - 1			WHEN 	(ena_p ='1' AND du='1')		ELSE
							pos3;
											
	POS3P: PROCESS(clk,rst)
		VARIABLE temp_3	:	UNSIGNED(3 DOWNTO 0);
	BEGIN
		IF((rst='1') OR (goal = '1')) THEN
			temp_3:=	"0100";
		ELSIF (rising_edge(clk)) THEN
			IF ((ena='1') AND (ena_speed_r = '1')) THEN
				temp_3	:=	pos3_next;
			END IF;
		END IF;
		y3_s	<=	STD_LOGIC_VECTOR(temp_3);
		pos3	<=	temp_3;
	END PROCESS;
	

    sequential: PROCESS (rst, clk)
    BEGIN
        IF (rst='1') THEN
            pr_state <= stay;
        ELSIF (rising_edge(clk)) THEN
            pr_state <= nx_state;
        END IF;
    END PROCESS sequential;
    
	 y1 <= y1_s;
	 y3 <= y3_s;
	 
    combinational: PROCESS (rl, pr_state, nx_state, y1_s, y3_s)
    BEGIN
        CASE pr_state IS
            WHEN stay =>
                ena_p  	<= '0';
					 du  		<= '0';

					 IF ((rl = "10") AND (y3_s /= "0111"))THEN
                    nx_state <= godown;
                ELSIF ((rl = "01") AND (y1_s /= "0000")) THEN 
                    nx_state <= goup;
					 ELSE
                    nx_state <= stay;
                END IF;
    -------------------------------------
            WHEN godown =>
					 ena_p  	<= '1';
					 du  		<= '0';

					 IF ((rl = "10") AND (y3_s /= "0111"))THEN
                    nx_state <= godown;
                ELSIF ((rl = "01") AND (y1_s /= "0000")) THEN 
                    nx_state <= goup;
					 ELSE
                    nx_state <= stay;
                END IF;            
    -------------------------------------
            WHEN goup =>
					 ena_p  	<= '1';
					 du  		<= '1';

					 IF ((rl = "10") AND (y3_s /= "0111"))THEN
                    nx_state <= godown;
                ELSIF ((rl = "01") AND (y1_s /= "0000")) THEN 
                    nx_state <= goup;
					 ELSE
                    nx_state <= stay;
                END IF;
				
            END CASE;
        END PROCESS combinational;
		  
--	L_SIGNAL: ENTITY work.edge_detect_inter
--		PORT MAP(	clk	=> clk,
--						d		=> rl_i(0),
--						edge  =>	rl(0));
--	R_SIGNAL: ENTITY work.edge_detect_inter
--		PORT MAP(	clk	=> clk,
--						d		=> rl_i(1),
--						edge  =>	rl(1));
	
END ARCHITECTURE fsm;